<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Secure the application on F5XC experience</title>
    <link>/030_security/</link>
    <description>Recent content in Secure the application on F5XC experience</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 08 Jul 2020 14:37:59 +0300</lastBuildDate><atom:link href="/030_security/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Web Application Firewall</title>
      <link>/030_security/020_waf/</link>
      <pubDate>Wed, 08 Jul 2020 14:37:59 +0300</pubDate>
      
      <guid>/030_security/020_waf/</guid>
      <description> First we need to create our WAF policy
We will put our policy into blocking mode and leave the other settings to their default configuration as they are based on F5 best practices in regards to security.  Attach the newely created WAF policy to the load balancer  </description>
    </item>
    
    <item>
      <title>Testing and Visibility</title>
      <link>/030_security/030_visibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/030_security/030_visibility/</guid>
      <description> First lets try and attack our application with a XSS attack using the following URL
https://::makeid::.sales-public.f5demos.com/?a=%3Cscript%3Ealert(%27xss%27)
You will receive a response as seen bellow. Copy the support ID, this will allow us to understand why the request has bee×ž blocked.  The requested URL was rejected. Please consult with your administrator.Your support ID is 37e7688f-6fdd-404e-9f6d-3813f9dc5648[Go Back]Lets look at the logs and understand why the request has been blocked   </description>
    </item>
    
    <item>
      <title>API Security</title>
      <link>/030_security/040_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/030_security/040_api/</guid>
      <description>Previously we have protected our application using a Negative Security Model.
We can do a lot more by creating manual rules that define what URLs, Methods and lot more are allowed. This is called Positive Security Model.
Although the Positive Security Model will intruduced enchanced security it will also increase the required maintenance.
Now we can implement both security models without the increased maintenance by using OpenAPI/Swaggerdefinitions of the application.</description>
    </item>
    
    <item>
      <title>Testing API Security</title>
      <link>/030_security/050_testing_api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/030_security/050_testing_api/</guid>
      <description>First we need to verify that the previously defined policy is working as expected
  Browse to https://::makeid::.sales-public.f5demos.com/notanactualpage
You should be able to recive all the relevant HTML, JS, CSS and have rendered the 404 page.
  Browse to https://::makeid::.sales-public.f5demos.com/v1/notanactualapi The request will be blocked with a 403 message and a support ID. Copy to the clipboard the support ID.
  The requested URL was rejected. Please consult with your administrator.</description>
    </item>
    
    <item>
      <title>Bot protection</title>
      <link>/030_security/060_bot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/030_security/060_bot/</guid>
      <description>Bots are a real issue. They are used for mass fraud which has an impact on the business and it customers.
One of the most common attack vectors is Credential stuffing which tries to validates a database of stolen credentials through the use of automation tools.
In the next steps we are going to protect our application login process from being accessed by these bots.
 Go the load balancer config section  Enable the Bot protection  Testing this is quite simple, run the following curl command from your PC curl -X POST https://::makeid::.</description>
    </item>
    
  </channel>
</rss>
